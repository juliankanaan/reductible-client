{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime-corejs2/regenerator\"));\n\nvar _getIterator2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/get-iterator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\"));\n\n//require('dotenv').config();\nvar fetch = require('isomorphic-fetch');\n\nvar EventEmitter = require(\"events\");\n\nfunction callAsync(_x) {\n  return _callAsync.apply(this, arguments);\n}\n\nfunction _callAsync() {\n  _callAsync = (0, _asyncToGenerator2.default)(\n  /*#__PURE__*/\n  _regenerator.default.mark(function _callee(url) {\n    var response, data;\n    return _regenerator.default.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch(url);\n\n          case 2:\n            response = _context.sent;\n            _context.next = 5;\n            return response.json();\n\n          case 5:\n            data = _context.sent;\n            return _context.abrupt(\"return\", formatter(data));\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _callAsync.apply(this, arguments);\n}\n\nfunction formatter(data) {\n  // separate into lines\n  var lines = returnLines(data);\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = (0, _getIterator2.default)(lines), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      line = _step.value;\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n}\n\nfunction returnLines(data) {\n  // body\n  return data;\n}\n\nmodule.exports = callAsync;","map":{"version":3,"sources":["/Users/juliankanaan/Documents/GitHub/clientReactInterfact/helpers/helper.js"],"names":["fetch","require","EventEmitter","callAsync","url","response","json","data","formatter","lines","returnLines","line","module","exports"],"mappings":";;;;;;;;;;AAAA;AACA,IAAMA,KAAK,GAAGC,OAAO,CAAC,kBAAD,CAArB;;AACA,IAAMC,YAAY,GAAGD,OAAO,CAAC,QAAD,CAA5B;;SAGeE,S;;;;;;;4BAAf,iBAAyBC,GAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAC2BJ,KAAK,CAACI,GAAD,CADhC;;AAAA;AACUC,YAAAA,QADV;AAAA;AAAA,mBAEuBA,QAAQ,CAACC,IAAT,EAFvB;;AAAA;AAEUC,YAAAA,IAFV;AAAA,6CAGWC,SAAS,CAACD,IAAD,CAHpB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAKA,SAASC,SAAT,CAAmBD,IAAnB,EAAyB;AACvB;AACA,MAAIE,KAAK,GAAGC,WAAW,CAACH,IAAD,CAAvB;AAFuB;AAAA;AAAA;;AAAA;AAIvB,oDAAaE,KAAb,4GAAoB;AAAfE,MAAAA,IAAe;AAEnB;AANsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQxB;;AACD,SAASD,WAAT,CAAqBH,IAArB,EAA2B;AACzB;AACA,SAAOA,IAAP;AACD;;AAEDK,MAAM,CAACC,OAAP,GAAiBV,SAAjB","sourcesContent":["//require('dotenv').config();\nconst fetch = require('isomorphic-fetch');\nconst EventEmitter = require(\"events\");\n\n\nasync function callAsync(url) {\n    const response = await fetch(url);\n    const data = await response.json();\n    return formatter(data);\n}\nfunction formatter(data) {\n  // separate into lines\n  var lines = returnLines(data);\n\n  for (line of lines) {\n\n  }\n\n}\nfunction returnLines(data) {\n  // body\n  return data;\n}\n\nmodule.exports = callAsync;\n"]},"metadata":{},"sourceType":"script"}