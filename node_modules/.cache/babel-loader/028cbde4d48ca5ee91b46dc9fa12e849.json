{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/esm/objectSpread\"));\n\nvar Papa = require('Papaparse'); // return jsonData\n\n\nfunction readCsv(file) {\n  var json = Papa.parse(file, config);\n  console.log(json);\n} // parse source, return array of clean records\n\n\nfunction transformer(json, descAlias, costAlias) {\n  // alias = file column names for procedureName, etc\n  var recordTemplate = {\n    hospital: '',\n    procedureName: '',\n    procedureCost: ''\n  };\n  var record = (0, _objectSpread2.default)({}, recordTemplate); // clone\n  // look through source column names, get relevant data for us\n\n  for (var prop in json) {\n    console.log(\"\".concat(prop, \": \").concat(json[prop])); // \"DataType: value\"\n\n    if (prop == descAlias) {\n      record[\"procedureName\"] = json[prop];\n    } else if (prop == costAlias) {\n      record[\"procedureCost\"] = json[prop];\n    }\n  } //console.log(record);\n\n}\n\nmodule.exports.readCsv = readCsv;","map":{"version":3,"sources":["/Users/juliankanaan/Documents/GitHub/clientReactInterfact/helpers/CsvHelper.js"],"names":["Papa","require","readCsv","file","json","parse","config","console","log","transformer","descAlias","costAlias","recordTemplate","hospital","procedureName","procedureCost","record","prop","module","exports"],"mappings":";;;;;;AAAA,IAAMA,IAAI,GAAGC,OAAO,CAAC,WAAD,CAApB,C,CAGA;;;AACA,SAASC,OAAT,CAAiBC,IAAjB,EAAsB;AAEpB,MAAMC,IAAI,GAAGJ,IAAI,CAACK,KAAL,CAAWF,IAAX,EAAiBG,MAAjB,CAAb;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AACD,C,CAED;;;AACA,SAASK,WAAT,CAAqBL,IAArB,EAA2BM,SAA3B,EAAsCC,SAAtC,EAAgD;AAAE;AAEhD,MAAMC,cAAc,GAAG;AACrBC,IAAAA,QAAQ,EAAE,EADW;AAErBC,IAAAA,aAAa,EAAE,EAFM;AAGrBC,IAAAA,aAAa,EAAE;AAHM,GAAvB;AAKA,MAAIC,MAAM,mCAAOJ,cAAP,CAAV,CAP8C,CAOZ;AAClC;;AACA,OAAK,IAAIK,IAAT,IAAiBb,IAAjB,EAAuB;AACrBG,IAAAA,OAAO,CAACC,GAAR,WAAeS,IAAf,eAAwBb,IAAI,CAACa,IAAD,CAA5B,GADqB,CACkB;;AACvC,QAAIA,IAAI,IAAIP,SAAZ,EAAuB;AACrBM,MAAAA,MAAM,CAAC,eAAD,CAAN,GAA0BZ,IAAI,CAACa,IAAD,CAA9B;AACD,KAFD,MAEO,IAAIA,IAAI,IAAIN,SAAZ,EAAuB;AAC5BK,MAAAA,MAAM,CAAC,eAAD,CAAN,GAA0BZ,IAAI,CAACa,IAAD,CAA9B;AACD;AACF,GAhB6C,CAkB9C;;AAED;;AACDC,MAAM,CAACC,OAAP,CAAejB,OAAf,GAAyBA,OAAzB","sourcesContent":["const Papa = require('Papaparse');\n\n\n// return jsonData\nfunction readCsv(file){\n\n  const json = Papa.parse(file, config);\n  console.log(json);\n}\n\n// parse source, return array of clean records\nfunction transformer(json, descAlias, costAlias){ // alias = file column names for procedureName, etc\n\n  const recordTemplate = {\n    hospital: '',\n    procedureName: '',\n    procedureCost: ''\n  }\n  var record = {...recordTemplate}; // clone\n  // look through source column names, get relevant data for us\n  for (let prop in json) {\n    console.log(`${prop}: ${json[prop]}`); // \"DataType: value\"\n    if (prop == descAlias) {\n      record[\"procedureName\"] = json[prop];\n    } else if (prop == costAlias) {\n      record[\"procedureCost\"] = json[prop];\n    }\n  }\n\n  //console.log(record);\n\n}\nmodule.exports.readCsv = readCsv;\n"]},"metadata":{},"sourceType":"script"}