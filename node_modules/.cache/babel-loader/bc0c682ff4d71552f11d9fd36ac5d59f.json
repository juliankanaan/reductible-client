{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/esm/objectSpread\"));\n\nvar _getIterator2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/get-iterator\"));\n\nvar Papa = require('Papaparse'); // return jsonData\n\n\nfunction readCsv(file) {\n  var config = {\n    headers: true\n  };\n  Papa.parse(file, {\n    header: false,\n    complete: function complete(results) {\n      //console.log(results);\n      //console.log(cleanUp(results));\n      //console.log(transformer(results, 0,1));\n      //console.log(JSON.stringify(transformer(results, 0,1)));\n\n      /*\n      ex = [\n      {\"hospital\":\"\",\"procedureName\":\"12X40X120 PROTEGE STENT\",\"procedureCost\":\"1500.00\"},\n      {\"hospital\":\"\",\"procedureName\":\"12X46 RELIANT STENT GRAFTCATH\",\"procedureCost\":\"500.00\"},\n      {\"hospital\":\"\",\"procedureName\":\"12X8 AMPLATZER VASCULAR PLUG\",\"procedureCost\":\"1484.00\"}\n      ]\n      */\n      postToEndpoint(results);\n    }\n  });\n}\n\nfunction postToEndpoint(data) {\n  var endpoint = 'https://pacific-lake-79223.herokuapp.com/api/push/bulk';\n  var options = {\n    method: 'POST',\n    body: data,\n    credentials: 'include',\n    headers: {\n      \"Content-Type\": \"application/json\"\n    } // leggo\n\n  };\n  fetch(endpoint, options).then(function (response) {\n    // check response\n    console.log(response.status);\n  }).then(function (json) {\n    console.log(json.json());\n  }).catch(function (err) {\n    console.log(err);\n  });\n}\n\nfunction cleanUp(json, removeHeader) {\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = (0, _getIterator2.default)(json), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var el = _step.value;\n      el.map(function (x) {\n        if (x.length > 0) {\n          return x;\n        }\n      });\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return json;\n} // parse source, return array of clean records\n\n\nfunction transformer(json, descPos, costPos) {\n  // alias = file column names for procedureName, etc\n  var records = [];\n  var recordTemplate = {\n    hospital: '',\n    procedureName: '',\n    procedureCost: '' // remove first line {usually a shit header }\n\n  };\n  json['data'].shift();\n  var _iteratorNormalCompletion2 = true;\n  var _didIteratorError2 = false;\n  var _iteratorError2 = undefined;\n\n  try {\n    for (var _iterator2 = (0, _getIterator2.default)(json['data']), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n      var element = _step2.value;\n      var record = (0, _objectSpread2.default)({}, recordTemplate);\n      record['hospital'] = 'Mount Sinai Hospital';\n      record['procedureName'] = element[descPos].trim();\n      record['procedureCost'] = element[costPos].replace(\"$\", \"\").replace(\",\", \"\").trim();\n      records.push(record);\n    }\n  } catch (err) {\n    _didIteratorError2 = true;\n    _iteratorError2 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n        _iterator2.return();\n      }\n    } finally {\n      if (_didIteratorError2) {\n        throw _iteratorError2;\n      }\n    }\n  }\n\n  return records; //console.log(record);\n}\n\nmodule.exports.readCsv = readCsv;","map":null,"metadata":{},"sourceType":"script"}