{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/esm/objectSpread\"));\n\nvar _getIterator2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/get-iterator\"));\n\nvar Papa = require('Papaparse'); // return jsonData\n\n\nfunction readCsv(file) {\n  var config = {\n    headers: true\n  };\n  Papa.parse(file, {\n    header: false,\n    complete: function complete(results) {\n      //console.log(results);\n      console.log(cleanUp(results)); //console.log(transformer(results, 1, 2));\n    }\n  });\n}\n\nfunction cleanUp(json, removeHeader) {\n  // remove first line if needed\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = (0, _getIterator2.default)(json), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var el = _step.value;\n      el.map(function (x) {\n        if (x.length > 0) {\n          return x;\n        }\n      });\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return json;\n} // parse source, return array of clean records\n\n\nfunction transformer(json, descPos, costPos) {\n  // alias = file column names for procedureName, etc\n  var recordTemplate = {\n    hospital: '',\n    procedureName: '',\n    procedureCost: ''\n  };\n  var record = (0, _objectSpread2.default)({}, recordTemplate); // clone\n  // look through source column names, get relevant data for us\n\n  for (var prop in json) {\n    console.log(\"\".concat(prop, \": \").concat(json[prop])); // \"DataType: value\"\n\n    if (prop == descAlias) {\n      record[\"procedureName\"] = json[prop];\n    } else if (prop == costAlias) {\n      record[\"procedureCost\"] = json[prop];\n    }\n  }\n\n  return record; //console.log(record);\n}\n\nmodule.exports.readCsv = readCsv;","map":{"version":3,"sources":["/Users/juliankanaan/Documents/GitHub/clientReactInterfact/helpers/CsvHelper.js"],"names":["Papa","require","readCsv","file","config","headers","parse","header","complete","results","console","log","cleanUp","json","removeHeader","el","map","x","length","transformer","descPos","costPos","recordTemplate","hospital","procedureName","procedureCost","record","prop","descAlias","costAlias","module","exports"],"mappings":";;;;;;;;AAAA,IAAMA,IAAI,GAAGC,OAAO,CAAC,WAAD,CAApB,C,CAGA;;;AACA,SAASC,OAAT,CAAiBC,IAAjB,EAAsB;AACpB,MAAMC,MAAM,GAAG;AACbC,IAAAA,OAAO,EAAE;AADI,GAAf;AAGAL,EAAAA,IAAI,CAACM,KAAL,CAAWH,IAAX,EAAiB;AACfI,IAAAA,MAAM,EAAE,KADO;AAEfC,IAAAA,QAAQ,EAAE,kBAACC,OAAD,EAAa;AACrB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYC,OAAO,CAACH,OAAD,CAAnB,EAFqB,CAGrB;AACD;AANc,GAAjB;AASD;;AACD,SAASG,OAAT,CAAiBC,IAAjB,EAAuBC,YAAvB,EAAqC;AACnC;AADmC;AAAA;AAAA;;AAAA;AAGnC,oDAAeD,IAAf,4GAAqB;AAAA,UAAZE,EAAY;AACjBA,MAAAA,EAAE,CAACC,GAAH,CAAO,UAACC,CAAD,EAAO;AACZ,YAAIA,CAAC,CAACC,MAAF,GAAW,CAAf,EAAkB;AAChB,iBAAOD,CAAP;AACD;AACF,OAJD;AAKD;AATgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAUnC,SAAOJ,IAAP;AACD,C,CAED;;;AACA,SAASM,WAAT,CAAqBN,IAArB,EAA2BO,OAA3B,EAAoCC,OAApC,EAA4C;AAAE;AAE5C,MAAMC,cAAc,GAAG;AACrBC,IAAAA,QAAQ,EAAE,EADW;AAErBC,IAAAA,aAAa,EAAE,EAFM;AAGrBC,IAAAA,aAAa,EAAE;AAHM,GAAvB;AAKA,MAAIC,MAAM,mCAAOJ,cAAP,CAAV,CAP0C,CAOR;AAClC;;AACA,OAAK,IAAIK,IAAT,IAAiBd,IAAjB,EAAuB;AACrBH,IAAAA,OAAO,CAACC,GAAR,WAAegB,IAAf,eAAwBd,IAAI,CAACc,IAAD,CAA5B,GADqB,CACkB;;AACvC,QAAIA,IAAI,IAAIC,SAAZ,EAAuB;AACrBF,MAAAA,MAAM,CAAC,eAAD,CAAN,GAA0Bb,IAAI,CAACc,IAAD,CAA9B;AACD,KAFD,MAEO,IAAIA,IAAI,IAAIE,SAAZ,EAAuB;AAC5BH,MAAAA,MAAM,CAAC,eAAD,CAAN,GAA0Bb,IAAI,CAACc,IAAD,CAA9B;AACD;AACF;;AACD,SAAOD,MAAP,CAjB0C,CAkB1C;AAED;;AACDI,MAAM,CAACC,OAAP,CAAe7B,OAAf,GAAyBA,OAAzB","sourcesContent":["const Papa = require('Papaparse');\n\n\n// return jsonData\nfunction readCsv(file){\n  const config = {\n    headers: true\n  }\n  Papa.parse(file, {\n    header: false,\n    complete: (results) => {\n      //console.log(results);\n      console.log(cleanUp(results));\n      //console.log(transformer(results, 1, 2));\n    }\n  });\n\n}\nfunction cleanUp(json, removeHeader) {\n  // remove first line if needed\n\n  for (var el of json) {\n      el.map((x) => {\n        if (x.length > 0) {\n          return x;\n        }\n      });\n    }\n  return json;\n}\n\n// parse source, return array of clean records\nfunction transformer(json, descPos, costPos){ // alias = file column names for procedureName, etc\n\n  const recordTemplate = {\n    hospital: '',\n    procedureName: '',\n    procedureCost: ''\n  }\n  var record = {...recordTemplate}; // clone\n  // look through source column names, get relevant data for us\n  for (let prop in json) {\n    console.log(`${prop}: ${json[prop]}`); // \"DataType: value\"\n    if (prop == descAlias) {\n      record[\"procedureName\"] = json[prop];\n    } else if (prop == costAlias) {\n      record[\"procedureCost\"] = json[prop];\n    }\n  }\n  return record;\n  //console.log(record);\n\n}\nmodule.exports.readCsv = readCsv;\n"]},"metadata":{},"sourceType":"script"}