{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n\n//require('dotenv').config();\nvar fetch = require('isomorphic-fetch'); // maybe get thus from the ``\n\n\nvar restApiPath = 'https://localhost:4000/post/push';\n\nfunction callAsync(_x, _x2) {\n  return _callAsync.apply(this, arguments);\n}\n\nfunction _callAsync() {\n  _callAsync = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(url, schema) {\n    var response, data;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch(url);\n\n          case 2:\n            response = _context.sent;\n            _context.next = 5;\n            return response.json();\n\n          case 5:\n            data = _context.sent;\n            return _context.abrupt(\"return\", formatter(data, schema));\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _callAsync.apply(this, arguments);\n}\n\nfunction formatter(data, schema) {\n  // separate into lines\n\n  /*\n  var lines = returnLines(data);\n   for (line of lines) {\n    //\n    getPriceProcedurePairs(line, schema)\n  }\n  */\n  return data;\n}\n\nfunction returnLines(data) {\n  // body\n  return data;\n}\n\nfunction getPriceProcedurePairs(line, schema) {\n  // loop concurrently over each array. ALSO: try to catch errors (index out of range, just ignore the bad rows )\n  // then join the descriptions together\n  // then push into json pairs\n  var jsonData = _JSON$stringify({\n    hospital: '',\n    procedureName: '',\n    procedureCost: ''\n  });\n\n  console.log(jsonData);\n  return postToApi(jsonData);\n}\n\nfunction postToApi(_x3) {\n  return _postToApi.apply(this, arguments);\n}\n\nfunction _postToApi() {\n  _postToApi = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(data) {\n    var post, request;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return fetch(restApiPath, {\n              method: 'POST',\n              body: _JSON$stringify({\n                hospital: data.hospital,\n                procedureName: data.procedureName,\n                procedureCost: data.procedureCost\n              }),\n              headers: {\n                'Content-Type': 'application/json'\n              }\n            });\n\n          case 2:\n            post = _context2.sent;\n            _context2.next = 5;\n            return response.json();\n\n          case 5:\n            request = _context2.sent;\n            console.log(request);\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _postToApi.apply(this, arguments);\n}\n\nmodule.export.callAsync = callAsync;","map":{"version":3,"sources":["/Users/juliankanaan/Documents/GitHub/clientReactInterfact/helpers/helper.js"],"names":["fetch","require","restApiPath","callAsync","url","schema","response","json","data","formatter","returnLines","getPriceProcedurePairs","line","jsonData","hospital","procedureName","procedureCost","console","log","postToApi","method","body","headers","post","request","module","export"],"mappings":";;;;AAAA;AACA,IAAMA,KAAK,GAAGC,OAAO,CAAC,kBAAD,CAArB,C,CACA;;;AACA,IAAMC,WAAW,GAAG,kCAApB;;SAGeC,S;;;;;;;2BAAf,iBAAyBC,GAAzB,EAA8BC,MAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAC2BL,KAAK,CAACI,GAAD,CADhC;;AAAA;AACUE,YAAAA,QADV;AAAA;AAAA,mBAEuBA,QAAQ,CAACC,IAAT,EAFvB;;AAAA;AAEUC,YAAAA,IAFV;AAAA,6CAGWC,SAAS,CAACD,IAAD,EAAOH,MAAP,CAHpB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAKA,SAASI,SAAT,CAAmBD,IAAnB,EAAyBH,MAAzB,EAAiC;AAC/B;;AACA;;;;;;;AAQA,SAAOG,IAAP;AAED;;AACD,SAASE,WAAT,CAAqBF,IAArB,EAA2B;AACzB;AACA,SAAOA,IAAP;AACD;;AACD,SAASG,sBAAT,CAAgCC,IAAhC,EAAsCP,MAAtC,EAA8C;AAC5C;AAEA;AAEA;AACA,MAAIQ,QAAQ,GAAG,gBAAe;AAC5BC,IAAAA,QAAQ,EAAE,EADkB;AAE5BC,IAAAA,aAAa,EAAE,EAFa;AAG5BC,IAAAA,aAAa,EAAE;AAHa,GAAf,CAAf;;AAKAC,EAAAA,OAAO,CAACC,GAAR,CAAYL,QAAZ;AACA,SAAOM,SAAS,CAACN,QAAD,CAAhB;AACD;;SACcM,S;;;;;;;2BAAf,kBAAyBX,IAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAGqBR,KAAK,CAACE,WAAD,EAAa;AACnCkB,cAAAA,MAAM,EAAE,MAD2B;AAEnCC,cAAAA,IAAI,EAAE,gBAAe;AACnBP,gBAAAA,QAAQ,EAAEN,IAAI,CAACM,QADI;AAEnBC,gBAAAA,aAAa,EAAEP,IAAI,CAACO,aAFD;AAGnBC,gBAAAA,aAAa,EAAER,IAAI,CAACQ;AAHD,eAAf,CAF6B;AAOnCM,cAAAA,OAAO,EAAE;AAAC,gCAAgB;AAAjB;AAP0B,aAAb,CAH1B;;AAAA;AAGQC,YAAAA,IAHR;AAAA;AAAA,mBAYwBjB,QAAQ,CAACC,IAAT,EAZxB;;AAAA;AAYQiB,YAAAA,OAZR;AAaEP,YAAAA,OAAO,CAACC,GAAR,CAAYM,OAAZ;;AAbF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAeAC,MAAM,CAACC,MAAP,CAAcvB,SAAd,GAA0BA,SAA1B","sourcesContent":["//require('dotenv').config();\nconst fetch = require('isomorphic-fetch');\n// maybe get thus from the ``\nconst restApiPath = 'https://localhost:4000/post/push';\n\n\nasync function callAsync(url, schema) {\n    const response = await fetch(url);\n    const data = await response.json();\n    return formatter(data, schema);\n}\nfunction formatter(data, schema) {\n  // separate into lines\n  /*\n  var lines = returnLines(data);\n\n  for (line of lines) {\n    //\n    getPriceProcedurePairs(line, schema)\n  }\n  */\n  return data;\n\n}\nfunction returnLines(data) {\n  // body\n  return data;\n}\nfunction getPriceProcedurePairs(line, schema) {\n  // loop concurrently over each array. ALSO: try to catch errors (index out of range, just ignore the bad rows )\n\n  // then join the descriptions together\n\n  // then push into json pairs\n  var jsonData = JSON.stringify({\n    hospital: '',\n    procedureName: '',\n    procedureCost: ''\n  });\n  console.log(jsonData);\n  return postToApi(jsonData);\n}\nasync function postToApi(data){\n  // push a single data point to DB\n  // NOTE: maybe use bulk insert?\n  const post = await fetch(restApiPath,{\n    method: 'POST',\n    body: JSON.stringify({\n      hospital: data.hospital,\n      procedureName: data.procedureName,\n      procedureCost: data.procedureCost\n    }),\n    headers: {'Content-Type': 'application/json'}\n  });\n  const request = await response.json();\n  console.log(request);\n}\nmodule.export.callAsync = callAsync;\n"]},"metadata":{},"sourceType":"module"}