{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/juliankanaan/Documents/GitHub/clientReactInterfact/components/Records.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nvar options = {\n  method: 'GET',\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n};\n\nvar Records =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Records, _React$Component);\n\n  function Records(props) {\n    var _this;\n\n    _classCallCheck(this, Records);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Records).call(this, props));\n    _this.state = {\n      records: []\n    };\n    return _this;\n  }\n\n  _createClass(Records, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      fetch(\"http://localhost:4000/api/records/lookup?procedureDescription=xray&limit=5&hospital=Mount+Sinai\", options).then(function (data) {\n        return data.json();\n      }).then(function (records) {\n        _this2.setState({\n          records: records\n        });\n\n        console.log(_this2.state.records);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, \"Recent inserts\"), this.state.records.map(function (record) {\n        return React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35\n          },\n          __self: this\n        }, record.procedureName);\n      }));\n    }\n  }]);\n\n  return Records;\n}(React.Component);\n\nexport default Records;","map":{"version":3,"sources":["/Users/juliankanaan/Documents/GitHub/clientReactInterfact/components/Records.jsx"],"names":["React","PropTypes","options","method","headers","Records","props","state","records","fetch","then","data","json","setState","console","log","map","record","procedureName","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,IAAMC,OAAO,GAAG;AACdC,EAAAA,MAAM,EAAE,KADM;AAEdC,EAAAA,OAAO,EAAE;AACP,oBAAgB;AADT;AAFK,CAAhB;;IAOMC,O;;;;;AACJ,mBAAYC,KAAZ,EAAkB;AAAA;;AAAA;;AAChB,iFAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAE;AADE,KAAb;AAFgB;AAKjB;;;;wCAEmB;AAAA;;AAClBC,MAAAA,KAAK,CAAC,iGAAD,EAAoGP,OAApG,CAAL,CACGQ,IADH,CACQ,UAAAC,IAAI,EAAI;AACZ,eAAOA,IAAI,CAACC,IAAL,EAAP;AACD,OAHH,EAIGF,IAJH,CAIQ,UAAAF,OAAO,EAAI;AACf,QAAA,MAAI,CAACK,QAAL,CAAc;AAACL,UAAAA,OAAO,EAAPA;AAAD,SAAd;;AACAM,QAAAA,OAAO,CAACC,GAAR,CAAY,MAAI,CAACR,KAAL,CAAWC,OAAvB;AACD,OAPH;AAQD;;;6BAES;AACR,aACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADJ,EAEK,KAAKD,KAAL,CAAWC,OAAX,CAAmBQ,GAAnB,CAAuB,UAAAC,MAAM;AAAA,eAC5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAIA,MAAM,CAACC,aAAX,CAD4B;AAAA,OAA7B,CAFL,CADA;AAQD;;;;EA5BmBlB,KAAK,CAACmB,S;;AA+B5B,eAAed,OAAf","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst options = {\n  method: 'GET',\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n}\n\nclass Records extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      records: []\n    }\n  }\n\n  componentDidMount() {\n    fetch(\"http://localhost:4000/api/records/lookup?procedureDescription=xray&limit=5&hospital=Mount+Sinai\", options)\n      .then(data => {\n        return data.json();\n      })\n      .then(records => {\n        this.setState({records})\n        console.log(this.state.records);\n      })\n  }\n\n  render () {\n    return(\n    <div>\n        <h4>Recent inserts</h4>\n        {this.state.records.map(record => (\n          <p>{record.procedureName}</p>\n        ))}\n    </div>\n  )\n  }\n}\n\nexport default Records;\n"]},"metadata":{},"sourceType":"module"}