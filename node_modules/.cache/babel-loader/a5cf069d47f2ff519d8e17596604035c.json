{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/esm/objectSpread\"));\n\nvar _values = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/object/values\"));\n\nvar Papa = require('Papaparse'); // return jsonData\n\n\nfunction readCsv(file) {\n  var config = {\n    headers: true\n  };\n  Papa.parse(file, {\n    header: false,\n    complete: function complete(results) {\n      //console.log(results);\n      console.log(cleanUp(results));\n    }\n  });\n}\n\nfunction cleanUp(json, removeHeader) {\n  // remove first line if needed\n  json.forEach(function (element) {\n    // remove empty elements of arrays\n    (0, _values.default)(element).map(function (el) {\n      if (el.length > 0) {\n        return el;\n      }\n    });\n  });\n  return json;\n} // parse source, return array of clean records\n\n\nfunction transformer(json, descAlias, costAlias) {\n  // alias = file column names for procedureName, etc\n  var recordTemplate = {\n    hospital: '',\n    procedureName: '',\n    procedureCost: ''\n  };\n  var record = (0, _objectSpread2.default)({}, recordTemplate); // clone\n  // look through source column names, get relevant data for us\n\n  for (var prop in json) {\n    console.log(\"\".concat(prop, \": \").concat(json[prop])); // \"DataType: value\"\n\n    if (prop == descAlias) {\n      record[\"procedureName\"] = json[prop];\n    } else if (prop == costAlias) {\n      record[\"procedureCost\"] = json[prop];\n    }\n  } //console.log(record);\n\n}\n\nmodule.exports.readCsv = readCsv;","map":{"version":3,"sources":["/Users/juliankanaan/Documents/GitHub/clientReactInterfact/helpers/CsvHelper.js"],"names":["Papa","require","readCsv","file","config","headers","parse","header","complete","results","console","log","cleanUp","json","removeHeader","forEach","element","map","el","length","transformer","descAlias","costAlias","recordTemplate","hospital","procedureName","procedureCost","record","prop","module","exports"],"mappings":";;;;;;;;AAAA,IAAMA,IAAI,GAAGC,OAAO,CAAC,WAAD,CAApB,C,CAGA;;;AACA,SAASC,OAAT,CAAiBC,IAAjB,EAAsB;AACpB,MAAMC,MAAM,GAAG;AACbC,IAAAA,OAAO,EAAE;AADI,GAAf;AAGAL,EAAAA,IAAI,CAACM,KAAL,CAAWH,IAAX,EAAiB;AACfI,IAAAA,MAAM,EAAE,KADO;AAEfC,IAAAA,QAAQ,EAAE,kBAACC,OAAD,EAAa;AACrB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYC,OAAO,CAACH,OAAD,CAAnB;AACD;AALc,GAAjB;AAQD;;AACD,SAASG,OAAT,CAAiBC,IAAjB,EAAuBC,YAAvB,EAAqC;AACnC;AAEAD,EAAAA,IAAI,CAACE,OAAL,CAAa,UAAAC,OAAO,EAAI;AAEtB;AACA,yBAAcA,OAAd,EAAuBC,GAAvB,CAA2B,UAAAC,EAAE,EAAI;AAC/B,UAAIA,EAAE,CAACC,MAAH,GAAY,CAAhB,EAAmB;AACjB,eAAOD,EAAP;AACD;AACF,KAJD;AAKD,GARD;AASA,SAAOL,IAAP;AACD,C,CAED;;;AACA,SAASO,WAAT,CAAqBP,IAArB,EAA2BQ,SAA3B,EAAsCC,SAAtC,EAAgD;AAAE;AAEhD,MAAMC,cAAc,GAAG;AACrBC,IAAAA,QAAQ,EAAE,EADW;AAErBC,IAAAA,aAAa,EAAE,EAFM;AAGrBC,IAAAA,aAAa,EAAE;AAHM,GAAvB;AAKA,MAAIC,MAAM,mCAAOJ,cAAP,CAAV,CAP8C,CAOZ;AAClC;;AACA,OAAK,IAAIK,IAAT,IAAiBf,IAAjB,EAAuB;AACrBH,IAAAA,OAAO,CAACC,GAAR,WAAeiB,IAAf,eAAwBf,IAAI,CAACe,IAAD,CAA5B,GADqB,CACkB;;AACvC,QAAIA,IAAI,IAAIP,SAAZ,EAAuB;AACrBM,MAAAA,MAAM,CAAC,eAAD,CAAN,GAA0Bd,IAAI,CAACe,IAAD,CAA9B;AACD,KAFD,MAEO,IAAIA,IAAI,IAAIN,SAAZ,EAAuB;AAC5BK,MAAAA,MAAM,CAAC,eAAD,CAAN,GAA0Bd,IAAI,CAACe,IAAD,CAA9B;AACD;AACF,GAhB6C,CAkB9C;;AAED;;AACDC,MAAM,CAACC,OAAP,CAAe5B,OAAf,GAAyBA,OAAzB","sourcesContent":["const Papa = require('Papaparse');\n\n\n// return jsonData\nfunction readCsv(file){\n  const config = {\n    headers: true\n  }\n  Papa.parse(file, {\n    header: false,\n    complete: (results) => {\n      //console.log(results);\n      console.log(cleanUp(results));\n    }\n  });\n\n}\nfunction cleanUp(json, removeHeader) {\n  // remove first line if needed\n\n  json.forEach(element => {\n\n    // remove empty elements of arrays\n    Object.values(element).map(el => {\n      if (el.length > 0) {\n        return el;\n      }\n    });\n  }); \n  return json;\n}\n\n// parse source, return array of clean records\nfunction transformer(json, descAlias, costAlias){ // alias = file column names for procedureName, etc\n\n  const recordTemplate = {\n    hospital: '',\n    procedureName: '',\n    procedureCost: ''\n  }\n  var record = {...recordTemplate}; // clone\n  // look through source column names, get relevant data for us\n  for (let prop in json) {\n    console.log(`${prop}: ${json[prop]}`); // \"DataType: value\"\n    if (prop == descAlias) {\n      record[\"procedureName\"] = json[prop];\n    } else if (prop == costAlias) {\n      record[\"procedureCost\"] = json[prop];\n    }\n  }\n\n  //console.log(record);\n\n}\nmodule.exports.readCsv = readCsv;\n"]},"metadata":{},"sourceType":"script"}