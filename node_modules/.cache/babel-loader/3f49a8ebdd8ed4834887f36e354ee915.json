{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/esm/objectSpread\"));\n\nvar _getIterator2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/get-iterator\"));\n\nvar _stringify = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/json/stringify\"));\n\nvar Papa = require('Papaparse'); // return jsonData\n\n\nfunction readCsv(file) {\n  var config = {\n    headers: true\n  };\n  Papa.parse(file, {\n    header: false,\n    complete: function complete(results) {\n      //console.log(results);\n      //console.log(cleanUp(results));\n      //console.log(transformer(results, 0,1));\n      //console.log(JSON.stringify(transformer(results, 0,1)));\n\n      /*\n      ex = [\n      {\"hospital\":\"\",\"procedureName\":\"12X40X120 PROTEGE STENT\",\"procedureCost\":\"1500.00\"},\n      {\"hospital\":\"\",\"procedureName\":\"12X46 RELIANT STENT GRAFTCATH\",\"procedureCost\":\"500.00\"},\n      {\"hospital\":\"\",\"procedureName\":\"12X8 AMPLATZER VASCULAR PLUG\",\"procedureCost\":\"1484.00\"}\n      ]\n      */\n      postToEndpoint((0, _stringify.default)(transformer(results, 0, 1)));\n    }\n  });\n}\n\nfunction postToEndpoint(data) {\n  var endpoint = 'http://localhost:4000/api/push/bulk';\n  var options = {\n    method: 'POST',\n    body: data,\n    headers: {\n      \"Content-Type\": \"application/json\"\n    } // leggo\n\n  };\n  fetch(endpoint, options).then(function (response) {\n    // check response\n    if (response.status == '200') {\n      console.log(\"yeet. sent and db'd\");\n    }\n  }).catch(function (err) {\n    console.log(err);\n  });\n}\n\nfunction cleanUp(json, removeHeader) {\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = (0, _getIterator2.default)(json), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var el = _step.value;\n      el.map(function (x) {\n        if (x.length > 0) {\n          return x;\n        }\n      });\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return json;\n} // parse source, return array of clean records\n\n\nfunction transformer(json, descPos, costPos) {\n  // alias = file column names for procedureName, etc\n  var records = [];\n  var recordTemplate = {\n    hospital: '',\n    procedureName: '',\n    procedureCost: '' // remove first line {usually a shit header }\n\n  };\n  json['data'].shift();\n  var _iteratorNormalCompletion2 = true;\n  var _didIteratorError2 = false;\n  var _iteratorError2 = undefined;\n\n  try {\n    for (var _iterator2 = (0, _getIterator2.default)(json['data']), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n      var element = _step2.value;\n      var record = (0, _objectSpread2.default)({}, recordTemplate);\n      record['hospital'] = 'Mount Sinai Hospital';\n      record['procedureName'] = element[descPos].trim();\n      record['procedureCost'] = element[costPos].replace(\"$\", \"\").replace(\",\", \"\").trim();\n      records.push(record);\n    }\n  } catch (err) {\n    _didIteratorError2 = true;\n    _iteratorError2 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n        _iterator2.return();\n      }\n    } finally {\n      if (_didIteratorError2) {\n        throw _iteratorError2;\n      }\n    }\n  }\n\n  return records; //console.log(record);\n}\n\nmodule.exports.readCsv = readCsv;","map":{"version":3,"sources":["/Users/juliankanaan/Documents/GitHub/clientReactInterfact/helpers/CsvHelper.js"],"names":["Papa","require","readCsv","file","config","headers","parse","header","complete","results","postToEndpoint","transformer","data","endpoint","options","method","body","fetch","then","response","status","console","log","catch","err","cleanUp","json","removeHeader","el","map","x","length","descPos","costPos","records","recordTemplate","hospital","procedureName","procedureCost","shift","element","record","trim","replace","push","module","exports"],"mappings":"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","sourcesContent":["const Papa = require('Papaparse');\n\n\n// return jsonData\nfunction readCsv(file){\n  const config = {\n    headers: true\n  }\n  Papa.parse(file, {\n    header: false,\n    complete: (results) => {\n      //console.log(results);\n      //console.log(cleanUp(results));\n      //console.log(transformer(results, 0,1));\n      //console.log(JSON.stringify(transformer(results, 0,1)));\n      /*\n      ex = [\n      {\"hospital\":\"\",\"procedureName\":\"12X40X120 PROTEGE STENT\",\"procedureCost\":\"1500.00\"},\n      {\"hospital\":\"\",\"procedureName\":\"12X46 RELIANT STENT GRAFTCATH\",\"procedureCost\":\"500.00\"},\n      {\"hospital\":\"\",\"procedureName\":\"12X8 AMPLATZER VASCULAR PLUG\",\"procedureCost\":\"1484.00\"}\n      ]\n      */\n      postToEndpoint(JSON.stringify(transformer(results, 0,1)));\n    }\n  });\n\n}\nfunction postToEndpoint(data) {\n  const endpoint = 'http://localhost:4000/api/push/bulk'\n  const options = {\n    method: 'POST',\n    body: data,\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }\n  // leggo\n  fetch(endpoint, options)\n    .then(response => { // check response\n      if (response.status == '200') {\n        console.log(\"yeet. sent and db'd\");\n      }\n    })\n    .catch(err => {\n      console.log(err);\n    });\n\n}\nfunction cleanUp(json, removeHeader) {\n\n  for (var el of json) {\n      el.map((x) => {\n        if (x.length > 0) {\n          return x;\n        }\n      });\n    }\n  return json;\n}\n\n// parse source, return array of clean records\nfunction transformer(json, descPos, costPos){ // alias = file column names for procedureName, etc\n  const records = [];\n  const recordTemplate = {\n    hospital: '',\n    procedureName: '',\n    procedureCost: ''\n  }\n  // remove first line {usually a shit header }\n  json['data'].shift();\n  for (var element of json['data']) {\n\n    var record = {...recordTemplate};\n    record['hospital'] = 'Mount Sinai Hospital';\n    record['procedureName'] = element[descPos].trim();\n    record['procedureCost'] = element[costPos].replace(\"$\", \"\").replace(\",\", \"\").trim();\n    records.push(record);\n\n  }\n\n  return records;\n  //console.log(record);\n\n}\nmodule.exports.readCsv = readCsv;\n"]},"metadata":{},"sourceType":"script"}