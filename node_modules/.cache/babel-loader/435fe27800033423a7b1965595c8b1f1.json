{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\nvar _stringify = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/json/stringify\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime-corejs2/regenerator\"));\n\nvar _getIterator2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/get-iterator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\"));\n\n//require('dotenv').config();\nvar fetch = require('isomorphic-fetch'); // maybe get thus from the ``\n\n\nvar restApiPath = 'https://localhost:4000/post/push';\n\nfunction callAsync(_x, _x2) {\n  return _callAsync.apply(this, arguments);\n}\n\nfunction _callAsync() {\n  _callAsync = (0, _asyncToGenerator2.default)(\n  /*#__PURE__*/\n  _regenerator.default.mark(function _callee(url, priceColumn) {\n    var response, data;\n    return _regenerator.default.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch(url);\n\n          case 2:\n            response = _context.sent;\n            _context.next = 5;\n            return response.text();\n\n          case 5:\n            data = _context.sent;\n            return _context.abrupt(\"return\", transformer(data, priceColumn));\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _callAsync.apply(this, arguments);\n}\n\nfunction transformer(data, priceColumn) {\n  var readyVals = []; // separate into lines\n\n  var lines = returnLines(data); // JSON populate\n\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = (0, _getIterator2.default)(lines), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var line = _step.value;\n      var jsonReady = groupDataReturnRecord(line, priceColumn); //readyVals.push(jsonReady);\n\n      console.log(jsonReady);\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return readyVals;\n}\n\nfunction returnLines(data) {\n  // works: 2:40pm\n  var lines = [];\n  var _iteratorNormalCompletion2 = true;\n  var _didIteratorError2 = false;\n  var _iteratorError2 = undefined;\n\n  try {\n    for (var _iterator2 = (0, _getIterator2.default)(data.split('\\n')), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n      var line = _step2.value;\n      lines.push(line.replace(/\\s+/g, ' ')); // trimmed extra spaces\n    }\n  } catch (err) {\n    _didIteratorError2 = true;\n    _iteratorError2 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n        _iterator2.return();\n      }\n    } finally {\n      if (_didIteratorError2) {\n        throw _iteratorError2;\n      }\n    }\n  }\n\n  return lines;\n}\n\nfunction groupDataReturnRecord(line, priceColumn) {\n  // create arr\n  var arr = line.split(\" \");\n  var record = {\n    hospital: '',\n    procedureName: '',\n    procedureCost: ''\n  };\n  var chars = [];\n  var nums = [];\n  var _iteratorNormalCompletion3 = true;\n  var _didIteratorError3 = false;\n  var _iteratorError3 = undefined;\n\n  try {\n    for (var _iterator3 = (0, _getIterator2.default)(arr), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n      var word = _step3.value;\n\n      if (word.length > 0) {\n        // or word[ignore]\n        if (!isNaN(word)) {\n          // Only pure numbers. 100M is not a number.\n          //console.log('number');\n          nums.push(word);\n        } else {\n          //console.log(word);\n          chars.push(word);\n        }\n      }\n    } // loop\n\n  } catch (err) {\n    _didIteratorError3 = true;\n    _iteratorError3 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n        _iterator3.return();\n      }\n    } finally {\n      if (_didIteratorError3) {\n        throw _iteratorError3;\n      }\n    }\n  }\n\n  record['procedureName'] = chars.join(\" \");\n  record['procedureCost'] = nums[priceColumn]; //return chars.join(\" \"); // \"100CM 6FR BRACHY CATHETER\"\n\n  return record;\n}\n\nfunction postToApi(_x3) {\n  return _postToApi.apply(this, arguments);\n}\n\nfunction _postToApi() {\n  _postToApi = (0, _asyncToGenerator2.default)(\n  /*#__PURE__*/\n  _regenerator.default.mark(function _callee2(data) {\n    var post, request;\n    return _regenerator.default.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return fetch(restApiPath, {\n              method: 'POST',\n              body: (0, _stringify.default)({\n                hospital: data.hospital,\n                procedureName: data.procedureName,\n                procedureCost: data.procedureCost\n              }),\n              headers: {\n                'Content-Type': 'application/json'\n              }\n            });\n\n          case 2:\n            post = _context2.sent;\n            _context2.next = 5;\n            return response.json();\n\n          case 5:\n            request = _context2.sent;\n            console.log(request);\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _postToApi.apply(this, arguments);\n}\n\nmodule.exports.callAsync = callAsync;","map":{"version":3,"sources":["/Users/juliankanaan/Documents/GitHub/clientReactInterfact/helpers/helper.js"],"names":["fetch","require","restApiPath","callAsync","url","priceColumn","response","text","data","transformer","readyVals","lines","returnLines","line","jsonReady","groupDataReturnRecord","console","log","split","push","replace","arr","record","hospital","procedureName","procedureCost","chars","nums","word","length","isNaN","join","postToApi","method","body","headers","post","json","request","module","exports"],"mappings":";;;;;;;;;;;;AAAA;AACA,IAAMA,KAAK,GAAGC,OAAO,CAAC,kBAAD,CAArB,C,CACA;;;AACA,IAAMC,WAAW,GAAG,kCAApB;;SAGeC,S;;;;;;;4BAAf,iBAAyBC,GAAzB,EAA8BC,WAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACyBL,KAAK,CAACI,GAAD,CAD9B;;AAAA;AACQE,YAAAA,QADR;AAAA;AAAA,mBAEqBA,QAAQ,CAACC,IAAT,EAFrB;;AAAA;AAEQC,YAAAA,IAFR;AAAA,6CAGSC,WAAW,CAACD,IAAD,EAAOH,WAAP,CAHpB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAMA,SAASI,WAAT,CAAqBD,IAArB,EAA2BH,WAA3B,EAAwC;AACtC,MAAIK,SAAS,GAAG,EAAhB,CADsC,CAEtC;;AACA,MAAMC,KAAK,GAAGC,WAAW,CAACJ,IAAD,CAAzB,CAHsC,CAItC;;AAJsC;AAAA;AAAA;;AAAA;AAKtC,oDAAiBG,KAAjB,4GAAwB;AAAA,UAAfE,IAAe;AACtB,UAAIC,SAAS,GAAGC,qBAAqB,CAACF,IAAD,EAAOR,WAAP,CAArC,CADsB,CAEtB;;AACAW,MAAAA,OAAO,CAACC,GAAR,CAAYH,SAAZ;AACD;AATqC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAUtC,SAAOJ,SAAP;AACD;;AAED,SAASE,WAAT,CAAqBJ,IAArB,EAA2B;AAAE;AAC3B,MAAIG,KAAK,GAAG,EAAZ;AADyB;AAAA;AAAA;;AAAA;AAEzB,qDAAiBH,IAAI,CAACU,KAAL,CAAW,IAAX,CAAjB,iHAAmC;AAAA,UAA1BL,IAA0B;AACjCF,MAAAA,KAAK,CAACQ,IAAN,CAAWN,IAAI,CAACO,OAAL,CAAa,MAAb,EAAqB,GAArB,CAAX,EADiC,CACM;AAExC;AALwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMzB,SAAOT,KAAP;AACD;;AAED,SAASI,qBAAT,CAA+BF,IAA/B,EAAqCR,WAArC,EAAkD;AAChD;AACA,MAAIgB,GAAG,GAAGR,IAAI,CAACK,KAAL,CAAW,GAAX,CAAV;AACA,MAAMI,MAAM,GAAG;AACbC,IAAAA,QAAQ,EAAE,EADG;AAEbC,IAAAA,aAAa,EAAE,EAFF;AAGbC,IAAAA,aAAa,EAAE;AAHF,GAAf;AAKA,MAAMC,KAAK,GAAG,EAAd;AACA,MAAMC,IAAI,GAAG,EAAb;AATgD;AAAA;AAAA;;AAAA;AAUhD,qDAAiBN,GAAjB,iHAAsB;AAAA,UAAbO,IAAa;;AACpB,UAAIA,IAAI,CAACC,MAAL,GAAc,CAAlB,EAAqB;AAAE;AACrB,YAAI,CAACC,KAAK,CAACF,IAAD,CAAV,EAAkB;AAAE;AAClB;AACAD,UAAAA,IAAI,CAACR,IAAL,CAAUS,IAAV;AACD,SAHD,MAGO;AACL;AACAF,UAAAA,KAAK,CAACP,IAAN,CAAWS,IAAX;AACD;AACF;AACF,KApB+C,CAoB9C;;AApB8C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAqBhDN,EAAAA,MAAM,CAAC,eAAD,CAAN,GAA0BI,KAAK,CAACK,IAAN,CAAW,GAAX,CAA1B;AACAT,EAAAA,MAAM,CAAC,eAAD,CAAN,GAA0BK,IAAI,CAACtB,WAAD,CAA9B,CAtBgD,CAuBhD;;AACA,SAAOiB,MAAP;AACD;;SACcU,S;;;;;;;4BAAf,kBAAyBxB,IAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAGqBR,KAAK,CAACE,WAAD,EAAc;AACpC+B,cAAAA,MAAM,EAAE,MAD4B;AAEpCC,cAAAA,IAAI,EAAE,wBAAe;AACnBX,gBAAAA,QAAQ,EAAEf,IAAI,CAACe,QADI;AAEnBC,gBAAAA,aAAa,EAAEhB,IAAI,CAACgB,aAFD;AAGnBC,gBAAAA,aAAa,EAAEjB,IAAI,CAACiB;AAHD,eAAf,CAF8B;AAOpCU,cAAAA,OAAO,EAAE;AACP,gCAAgB;AADT;AAP2B,aAAd,CAH1B;;AAAA;AAGQC,YAAAA,IAHR;AAAA;AAAA,mBAcwB9B,QAAQ,CAAC+B,IAAT,EAdxB;;AAAA;AAcQC,YAAAA,OAdR;AAeEtB,YAAAA,OAAO,CAACC,GAAR,CAAYqB,OAAZ;;AAfF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAiBAC,MAAM,CAACC,OAAP,CAAerC,SAAf,GAA2BA,SAA3B","sourcesContent":["//require('dotenv').config();\nconst fetch = require('isomorphic-fetch');\n// maybe get thus from the ``\nconst restApiPath = 'https://localhost:4000/post/push';\n\n\nasync function callAsync(url, priceColumn) {\n  const response = await fetch(url);\n  const data = await response.text();\n  return transformer(data, priceColumn);\n}\n\nfunction transformer(data, priceColumn) {\n  var readyVals = [];\n  // separate into lines\n  const lines = returnLines(data);\n  // JSON populate\n  for (var line of lines) {\n    var jsonReady = groupDataReturnRecord(line, priceColumn);\n    //readyVals.push(jsonReady);\n    console.log(jsonReady);\n  }\n  return readyVals;\n}\n\nfunction returnLines(data) { // works: 2:40pm\n  var lines = [];\n  for (var line of data.split('\\n')) {\n    lines.push(line.replace(/\\s+/g, ' ')); // trimmed extra spaces\n\n  }\n  return lines;\n}\n\nfunction groupDataReturnRecord(line, priceColumn) {\n  // create arr\n  var arr = line.split(\" \");\n  const record = {\n    hospital: '',\n    procedureName: '',\n    procedureCost: ''\n  }\n  const chars = [];\n  const nums = [];\n  for (var word of arr) {\n    if (word.length > 0) { // or word[ignore]\n      if (!isNaN(word)) { // Only pure numbers. 100M is not a number.\n        //console.log('number');\n        nums.push(word)\n      } else {\n        //console.log(word);\n        chars.push(word)\n      }\n    }\n  } // loop\n  record['procedureName'] = chars.join(\" \");\n  record['procedureCost'] = nums[priceColumn];\n  //return chars.join(\" \"); // \"100CM 6FR BRACHY CATHETER\"\n  return record;\n}\nasync function postToApi(data) {\n  // push a single data point to DB\n  // NOTE: maybe use bulk insert?\n  const post = await fetch(restApiPath, {\n    method: 'POST',\n    body: JSON.stringify({\n      hospital: data.hospital,\n      procedureName: data.procedureName,\n      procedureCost: data.procedureCost\n    }),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  const request = await response.json();\n  console.log(request);\n}\nmodule.exports.callAsync = callAsync;\n"]},"metadata":{},"sourceType":"script"}