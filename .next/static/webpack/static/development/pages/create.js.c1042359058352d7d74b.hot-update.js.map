{"version":3,"file":"static/webpack/static/development/pages/create.js.c1042359058352d7d74b.hot-update.js","sources":["webpack:///./helpers/helper.js"],"sourcesContent":["//require('dotenv').config();\nconst fetch = require('isomorphic-fetch');\n// maybe get thus from the ``\nconst restApiPath = 'https://localhost:4000/api/post/bulk';\n\n\nasync function callAsync(url, descStart, descEnd, priceColumn, hospital) {\n  const response = await fetch(url);\n  const data = await response.text();\n  const formattedData = transformer(data, descStart, descEnd, priceColumn, hospital);\n  console.log(formattedData);\n  return formattedData;\n    //return givePreview(formattedData);\n  // return postToApi(formattedData);\n\n}\n\nfunction givePreview(data) {\n  const preview = [];\n  console.log(data[0]);\n  // pick out three random elements of JSON array\n  var rand1 = Math.random() * data.length;\n  var rand2 = Math.random() * data.length;\n  var rand3 = Math.random() * data.length;\n  preview.push(data[rand1], data[rand2], data[rand3]);\n  return preview;\n\n}\n\nfunction transformer(data, descStart, descEnd, priceColumn, hospital) {\n  var readyVals = [];\n  // separate into lines\n  const lines = returnLines(data);\n  // JSON populate\n  for (var line of lines) {\n    var jsonReady = groupDataReturnRecord(line, descStart, descEnd, priceColumn);\n    jsonReady['hospital'] = hospital;\n    readyVals.push(jsonReady);\n    //console.log(jsonReady);\n  }\n  return readyVals;\n}\n\nfunction returnLines(data) { // works: 2:40pm\n  var lines = [];\n  for (var line of data.split('\\n')) {\n    lines.push(line.replace(/\\s+/g, ' ')); // trimmed extra spaces\n\n  }\n  lines.pop(); // there's always an empty element created at end, remove it\n  return lines;\n}\n\nfunction groupDataReturnRecord(line, descStart, descEnd, priceColumn) {\n  // create arr\n  var arr = line.split(\" \");\n  arr.pop(); // there's always an empty element created at end, remove it\n\n  const record = {\n    hospital: '',\n    procedureName: '',\n    procedureCost: ''\n  }\n\n  const cost = arr[arr.length + parseInt(priceColumn)]; // probably -2 position\n  // convert relative negative pos for descEnd to positive for this array\n  const positiveEnd = arr.indexOf(arr[arr.length + parseInt(descEnd)]);\n  // remap\n  var description = arr.map((word, pos) => {\n    if (pos >= parseInt(descStart) && pos <= positiveEnd) {\n      return word;\n    }\n  });\n\n  record['procedureName'] = description.join(\" \").trim();\n  record['procedureCost'] = cost;\n  //console.log(cost);\n  return record;\n}\nasync function postToApi(data) {\n  // push a single data point to DB\n  // NOTE: maybe use bulk insert?\n  const post = await fetch(restApiPath, {\n    method: 'POST',\n    body: JSON.stringify({\n      hospital: data.hospital,\n      procedureName: data.procedureName,\n      procedureCost: data.procedureCost\n    }),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  const request = await response.json();\n  console.log(request);\n}\nmodule.exports.callAsync = callAsync;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAAA;AACA;AAEA;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AAEA;AACA;AACA;AAJA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AACA;AADA;AAKA;AAAA;AACA;AACA;AACA;AAEA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAUA;AACA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAEA;AAAA;AACA;AAEA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AADA;AAPA;AACA;AAJA;AAGA;AAHA;AAAA;AACA;AADA;AAcA;AACA;AACA;AAhBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAiBA;;;;A","sourceRoot":""}