{"version":3,"file":"static/webpack/static/development/pages/create.js.cf6bb3df77c8f61b5c93.hot-update.js","sources":["webpack:///./helpers/helper.js"],"sourcesContent":["//require('dotenv').config();\nconst fetch = require('isomorphic-fetch');\n// maybe get thus from the ``\nconst restApiPath = 'https://localhost:4000/post/push';\n\n\nasync function callAsync(url, schema) {\n    const response = await fetch(url);\n    const data = await response.json();\n    return formatter(data, schema);\n}\nfunction formatter(data, schema) {\n  // separate into lines\n  /*\n  var lines = returnLines(data);\n\n  for (line of lines) {\n    //\n    getPriceProcedurePairs(line, schema)\n  }\n  */\n  return data;\n\n}\nfunction returnLines(data) {\n  // body\n  return data;\n}\nfunction getPriceProcedurePairs(line, schema) {\n  // loop concurrently over each array. ALSO: try to catch errors (index out of range, just ignore the bad rows )\n\n  // then join the descriptions together\n\n  // then push into json pairs\n  var jsonData = JSON.stringify({\n    hospital: '',\n    procedureName: '',\n    procedureCost: ''\n  });\n  //console.log(jsonData);\n  return postToApi(jsonData);\n}\nasync function postToApi(data){\n  // push a single data point to DB\n  // NOTE: maybe use bulk insert?\n  const post = await fetch(restApiPath,{\n    method: 'POST',\n    body: JSON.stringify({\n      hospital: data.hospital,\n      procedureName: data.procedureName,\n      procedureCost: data.procedureCost\n    }),\n    headers: {'Content-Type': 'application/json'}\n  });\n  const request = await response.json();\n  console.log(request);\n}\nmodule.exports.callAsync = callAsync;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAAA;AACA;AAEA;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AAEA;AAFA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAKA;AACA;AACA;AAAA;;;;;;;AAQA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AAAA;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AAPA;AACA;AAJA;AAGA;AAHA;AAAA;AACA;AADA;AAYA;AACA;AACA;AAdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAeA;;;;A","sourceRoot":""}